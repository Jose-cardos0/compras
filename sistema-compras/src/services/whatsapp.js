// Servi√ßo de WhatsApp (simulado para demonstra√ß√£o)
// Para integra√ß√£o real, voc√™ pode usar APIs como Twilio, WhatsApp Business API, etc.

export async function sendWhatsAppMessage(phoneNumber, message) {
  try {
    // Simula√ß√£o do envio de mensagem via WhatsApp
    console.log(`üì± ENVIANDO WHATSAPP PARA: ${phoneNumber}`);
    console.log(`üìù MENSAGEM: ${message}`);
    console.log("‚úÖ Mensagem enviada com sucesso!");

    // Aqui voc√™ integraria com uma API real de WhatsApp
    // Exemplo com Twilio:
    /*
    const response = await fetch('https://api.twilio.com/2010-04-01/Accounts/YOUR_ACCOUNT_SID/Messages.json', {
      method: 'POST',
      headers: {
        'Authorization': 'Basic ' + btoa('YOUR_ACCOUNT_SID:YOUR_AUTH_TOKEN'),
        'Content-Type': 'application/x-www-form-urlencoded',
      },
      body: new URLSearchParams({
        'From': 'whatsapp:+14155238886',
        'To': `whatsapp:${phoneNumber}`,
        'Body': message
      })
    });
    
    return await response.json();
    */

    // Simula√ß√£o de resposta bem-sucedida
    return {
      success: true,
      messageId: `msg_${Date.now()}`,
      timestamp: new Date().toISOString(),
    };
  } catch (error) {
    console.error("‚ùå Erro ao enviar mensagem WhatsApp:", error);
    throw error;
  }
}

// Fun√ß√£o para validar n√∫mero de telefone
export function validatePhoneNumber(phone) {
  // Remove caracteres n√£o num√©ricos
  const cleanPhone = phone.replace(/\D/g, "");

  // Verifica se tem pelo menos 10 d√≠gitos (formato brasileiro)
  if (cleanPhone.length < 10) {
    return false;
  }

  return true;
}

// Fun√ß√£o para formatar n√∫mero de telefone
export function formatPhoneNumber(phone) {
  const cleanPhone = phone.replace(/\D/g, "");

  // Adiciona c√≥digo do pa√≠s se n√£o tiver
  if (cleanPhone.length === 11 && !cleanPhone.startsWith("55")) {
    return "+55" + cleanPhone;
  } else if (cleanPhone.length === 13 && cleanPhone.startsWith("55")) {
    return "+" + cleanPhone;
  }

  return phone;
}
